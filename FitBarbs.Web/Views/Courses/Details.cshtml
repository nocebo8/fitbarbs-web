@model FitBarbs.Web.Models.Course
@using FitBarbs.Web.Models

@{
    // Nagłówek kursu: duży tytuł, podtytuł i badge poziomu obok tytułu
}
<section class="container px-4 md:px-6 py-6">
  <header class="flex flex-col gap-3 md:flex-row md:items-start md:justify-between">
    <div>
      <div class="flex items-center gap-2 flex-wrap">
        <h1 class="text-2xl md:text-3xl font-extrabold tracking-tight">@Model.Title</h1>
        <span class="badge">@Model.Difficulty</span>
      </div>
      <p class="text-[color:var(--fb-muted)] mt-1 max-w-3xl">@Model.Description</p>
    </div>

    @* Ujednolicone przyciski i wyrównanie *@
    <div class="flex gap-2">
      @if (User.IsInRole(ApplicationRoles.Instructor))
      {
        <a class="btn-primary" href="@Url.Action("Create", "Lessons", new { courseId = Model.Id })">Dodaj lekcję</a>
      }
      else if (User.Identity?.IsAuthenticated ?? false)
      {
        <form method="post" action="@Url.Action("Enroll", "Enrollments", new { courseId = Model.Id })" class="m-0">
          <button class="btn-primary" type="submit">Zapisz się</button>
        </form>
      }
    </div>
  </header>

  @* Sekcja listy lekcji: większe odstępy, separator i hierarchia typografii *@
  <div class="mt-6">
    <h2 class="text-lg font-semibold">Lekcje</h2>
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="mt-3 rounded-xl border border-[var(--fb-error)] bg-red-50 text-red-700 px-4 py-2">
          Wystąpiły błędy: @string.Join(", ", ViewData.ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage))
        </div>
    }
    <ul class="list-none p-0 m-0 mt-3">
      @{ var completed = (ViewBag.CompletedLessonIds as System.Collections.Generic.HashSet<int>) ?? new System.Collections.Generic.HashSet<int>(); }
      @foreach (var lesson in Model.Lessons.OrderBy(l => l.OrderIndex))
      {
        var isDone = completed.Contains(lesson.Id);
        <li class="py-4 px-3 border-b border-[var(--fb-border)] flex items-start justify-between gap-4">
          <div class="flex items-start gap-3">
            <img src="@(string.IsNullOrWhiteSpace(lesson.ThumbnailPath) ? (Model.ThumbnailPath ?? Url.Content("/img/hero_pilates.svg")) : lesson.ThumbnailPath)"
                 alt="Miniatura lekcji @lesson.Title"
                 class="w-24 aspect-video rounded-lg object-cover bg-[color:var(--fb-border)] select-none"
                 loading="lazy" decoding="async" fetchpriority="low"
                 srcset="@(string.IsNullOrWhiteSpace(lesson.ThumbnailPath) ? (Model.ThumbnailPath ?? Url.Content("/img/hero_pilates.svg")) : lesson.ThumbnailPath) 1x, @(string.IsNullOrWhiteSpace(lesson.ThumbnailPath) ? (Model.ThumbnailPath ?? Url.Content("/img/hero_pilates.svg")) : lesson.ThumbnailPath) 2x"
                 sizes="(max-width: 768px) 96px, 96px" />
            <div>
              <div class="font-semibold flex items-center gap-2">
                <span>@lesson.OrderIndex. @lesson.Title</span>
                @if (isDone)
                {
                  <span class="badge">Ukończona</span>
                }
              </div>
              <div class="text-sm text-[color:var(--fb-muted)] mt-0.5">@lesson.Description</div>
            </div>
          </div>
          <div class="flex items-center gap-2 self-center">
            @if (isDone)
            {
              <span class="text-xs text-[color:var(--fb-muted)]">Obejrzana</span>
            }
            <a class="btn-secondary" href="@Url.Action("Watch", "Lessons", new { id = lesson.Id })">
              Oglądaj
            </a>
          </div>
        </li>
      }
      @if (!Model.Lessons.Any())
      {
        <li class="py-4 px-3 text-[color:var(--fb-muted)]">Brak lekcji w tym kursie.</li>
      }
    </ul>
  </div>
</section>
